From de02779b1b313d5d4b6500be674c1d1d8816b8ec Mon Sep 17 00:00:00 2001
From: Paulo Filimone <paulphilimone@gmail.com>
Date: Sun, 22 Jul 2018 15:27:28 +0200
Subject: [PATCH] Allow HTTPS Support by removing old implementation of
 HttpClient/HttpGet and implementing connections with HttpURLConnection Small
 Details - Most of times we only use statusCode on HttpResponse, so
 HttpResponse can be removed) - HttpResponse becomes HttpURLConnection - No
 need for isReachable on HttpTask, we will just try to connect -
 response.getEntity().getContent() will be connection.getInputStream()

---
 .../java/org/openhds/mobile/task/HttpTask.java     | 150 +++++----------------
 .../org/openhds/mobile/task/SyncEntitiesTask.java  |  81 +++++------
 .../openhds/mobile/task/SyncFieldworkersTask.java  |  11 +-
 .../org/openhds/mobile/task/SyncFormsTask.java     |  59 ++++----
 4 files changed, 102 insertions(+), 199 deletions(-)

diff --git a/src/main/java/org/openhds/mobile/task/HttpTask.java b/src/main/java/org/openhds/mobile/task/HttpTask.java
index f6e231f..173bf8b 100644
--- a/src/main/java/org/openhds/mobile/task/HttpTask.java
+++ b/src/main/java/org/openhds/mobile/task/HttpTask.java
@@ -1,44 +1,23 @@
 package org.openhds.mobile.task;
 
-import static org.openhds.mobile.utilities.ConfigUtils.getResourceString;
-
 import java.io.IOException;
-import java.net.SocketTimeoutException;
+import java.net.HttpURLConnection;
 import java.net.URL;
 
-import org.apache.http.HttpHost;
-import org.apache.http.HttpResponse;
-import org.apache.http.HttpStatus;
-import org.apache.http.auth.AuthScope;
-import org.apache.http.auth.AuthenticationException;
-import org.apache.http.auth.UsernamePasswordCredentials;
-import org.apache.http.client.ClientProtocolException;
-import org.apache.http.client.CredentialsProvider;
-import org.apache.http.client.HttpClient;
-import org.apache.http.client.methods.HttpGet;
 import org.apache.http.conn.ConnectTimeoutException;
-import org.apache.http.impl.auth.BasicScheme;
-import org.apache.http.impl.client.BasicCredentialsProvider;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.params.BasicHttpParams;
-import org.apache.http.params.HttpConnectionParams;
-import org.apache.http.params.HttpParams;
-import org.openhds.mobile.R;
 
 import android.content.Context;
-import android.content.SharedPreferences;
 import android.os.AsyncTask;
-import android.preference.PreferenceManager;
+import android.util.Base64;
+import android.util.Log;
 
-public class HttpTask<Params, Progress> extends
-		AsyncTask<Params, Progress, HttpTask.EndResult> {
+public class HttpTask<Params, Progress> extends	AsyncTask<Params, Progress, HttpTask.EndResult> {
 	private static final int UNAUTHORIZED_STATUS_CODE = 401;
 	private static final int SUCCESS_STATUS_CODE = 200;
 	private static final int NO_CONTENT_CODE = 204;
 
 	protected RequestContext requestContext;
-	protected TaskListener listener;
-	protected HttpGet httpGet;
+	protected TaskListener listener;	
 	protected Context ctx;
 
 	public HttpTask(Context ctx, RequestContext requestContext, TaskListener listener) {
@@ -49,7 +28,6 @@ public class HttpTask<Params, Progress> extends
 	public HttpTask(Context ctx, RequestContext requestContext) {
 		this.ctx = ctx;
 		this.requestContext = requestContext;
-		httpGet = new HttpGet(requestContext.url.getPath());
 	}
 
 	public static enum EndResult {
@@ -93,21 +71,15 @@ public class HttpTask<Params, Progress> extends
 
 	@Override
 	protected EndResult doInBackground(Params... params) {
-		DefaultHttpClient httpClient = buildHttpClient(requestContext.user,
-				requestContext.password);
+		
 		try {
-			HttpResponse response;
-			boolean isReachable = false;
-			isReachable = isReachable(requestContext.url);
-			if(isReachable){
-				response = executeGet(httpClient, requestContext);
-			}
-			else{
-				return EndResult.CONNECTION_ERROR;
-			}
-			switch (response.getStatusLine().getStatusCode()) {
+		
+			HttpURLConnection connection = createConnection(requestContext.url, requestContext.user, requestContext.password);
+						
+			
+			switch (connection.getResponseCode()) {
 			case SUCCESS_STATUS_CODE:
-				return handleResponseData(response);
+				return handleResponseData(connection);
 			case NO_CONTENT_CODE:
 				return EndResult.NO_CONTENT;
 			case UNAUTHORIZED_STATUS_CODE:
@@ -115,94 +87,38 @@ public class HttpTask<Params, Progress> extends
 			default:
 				return EndResult.CONNECTION_ERROR;
 			}
-		} catch (ClientProtocolException e) {
+		} catch (java.net.ProtocolException e) {
 			return EndResult.CONNECTION_ERROR;
 		} catch (ConnectTimeoutException e) {
 			return EndResult.CONNECTION_TIMEOUT;
 		} catch (IOException e) {
 			return EndResult.CONNECTION_ERROR;
-		} catch (AuthenticationException e) {
-			return EndResult.BAD_AUTHENTICATION;
-		}
-		catch(Exception e){
+		} catch(Exception e){
 			return EndResult.CONNECTION_ERROR;
 		}
 	}
-	
-	private boolean isReachable(URL pUrl){
-		boolean result = false;
-		try
-		{
-	        SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(ctx);
-	        String serverKey = getResourceString(ctx,R.string.openhds_server_url_key);
-	        String openhdsurl = settings.getString(serverKey, "UNDEF");
-					
-		    HttpGet request = new HttpGet(openhdsurl);
-		    HttpParams httpParameters = new BasicHttpParams();
-		    int timeout = 3000;
-		    HttpConnectionParams.setConnectionTimeout(httpParameters, timeout);
-		    HttpClient httpClient = new DefaultHttpClient(httpParameters);
-		    HttpResponse response = httpClient.execute(request);
-
-		    int status = response.getStatusLine().getStatusCode();
-		    if (status == HttpStatus.SC_OK) 
-		    {
-		        result = true;
-		    }
-		}
-		catch (SocketTimeoutException e)
-		{
-		    result = false;
-		} catch (ClientProtocolException e) {
-			result = false;
-		} catch (IOException e) {
-			result = false;
-		}
-		return result;
+			
+	private HttpURLConnection createConnection(String strUrl, String username, String password) throws Exception {
+		URL url = new URL(strUrl);
+		
+		return createConnection(url, username, password);
 	}
+	
+	private HttpURLConnection createConnection(URL url, String username, String password) throws Exception {
+		String basicAuth = "Basic " + new String(Base64.encode((username+":"+password).getBytes(),Base64.NO_WRAP ));
 
-	public DefaultHttpClient buildHttpClient(String user, String password) {
-		DefaultHttpClient httpClient = new DefaultHttpClient();
-		setHttpClientParams(httpClient);
-		setHttpClientCredentials(httpClient, user, password);
-		return httpClient;
-	}
-
-	private void setHttpClientParams(DefaultHttpClient httpClient) {
-		httpClient.getParams().setIntParameter(
-				HttpConnectionParams.CONNECTION_TIMEOUT, 60 * 1000);
-		httpClient.getParams().setIntParameter(
-				HttpConnectionParams.SO_TIMEOUT, 60 * 1000);		
-	}
-
-	private void setHttpClientCredentials(DefaultHttpClient httpClient,
-			String user, String password) {
-		AuthScope scope = new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT,
-				AuthScope.ANY_REALM);
-		UsernamePasswordCredentials creds = new UsernamePasswordCredentials(
-				user, password);
-		CredentialsProvider credsProvider = new BasicCredentialsProvider();
-		credsProvider.setCredentials(scope, creds);
-
-		httpClient.setCredentialsProvider(credsProvider);
-	}
-
-	public HttpResponse executeGet(DefaultHttpClient client,
-			RequestContext requestContext) throws ClientProtocolException,
-			IOException, AuthenticationException {
-		HttpHost host = new HttpHost(requestContext.url.getHost(),
-				requestContext.url.getPort());
-
-		// preemptively provide credentials
-		UsernamePasswordCredentials creds = new UsernamePasswordCredentials(
-				requestContext.user, requestContext.password);
-		httpGet.addHeader(new BasicScheme().authenticate(creds, httpGet));
+		HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+		connection.setRequestMethod("GET");
+		connection.setReadTimeout(10000);
+		connection.setConnectTimeout(15000);
+		connection.setDoInput(true);
+		connection.setRequestProperty("Authorization", basicAuth);
 
-		return client.execute(host, httpGet);
-	}
+		Log.d("exec-url", ""+url);
 
-	public void addHeader(String name, String value) {
-		httpGet.addHeader(name, value);
+		connection.connect();
+		
+		return connection;
 	}
 
 	@Override
@@ -229,7 +145,7 @@ public class HttpTask<Params, Progress> extends
 		}
 	}
 
-	protected EndResult handleResponseData(HttpResponse response) {
+	protected EndResult handleResponseData(HttpURLConnection response) {
 		return EndResult.SUCCESS;
 	}
 }
diff --git a/src/main/java/org/openhds/mobile/task/SyncEntitiesTask.java b/src/main/java/org/openhds/mobile/task/SyncEntitiesTask.java
index 85fb36f..34cc4a1 100644
--- a/src/main/java/org/openhds/mobile/task/SyncEntitiesTask.java
+++ b/src/main/java/org/openhds/mobile/task/SyncEntitiesTask.java
@@ -1,42 +1,32 @@
 package org.openhds.mobile.task;
 
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.PushbackInputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.List;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
-import org.openhds.mobile.provider.OpenHDSProvider;
-import android.os.Environment;
-import net.sqlcipher.database.SQLiteDatabase;
 
-import org.apache.http.HttpEntity;
 import org.apache.http.HttpException;
-import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
-import org.apache.http.auth.AuthenticationException;
 import org.apache.http.auth.UsernamePasswordCredentials;
-import org.apache.http.client.ClientProtocolException;
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpGet;
-import org.apache.http.impl.auth.BasicScheme;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.params.BasicHttpParams;
-import org.apache.http.params.HttpConnectionParams;
-import org.apache.http.params.HttpParams;
 import org.openhds.mobile.OpenHDS;
 import org.openhds.mobile.R;
 import org.openhds.mobile.listener.SyncDatabaseListener;
 import org.openhds.mobile.model.Settings;
+import org.openhds.mobile.provider.OpenHDSProvider;
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 import org.xmlpull.v1.XmlPullParserFactory;
@@ -46,7 +36,10 @@ import android.content.ContentResolver;
 import android.content.ContentValues;
 import android.content.Context;
 import android.os.AsyncTask;
+import android.os.Environment;
+import android.util.Base64;
 import android.util.Log;
+import net.sqlcipher.database.SQLiteDatabase;
 
 /**
  * AsyncTask responsible for downloading the OpenHDS "database", that is a
@@ -83,6 +76,7 @@ public class SyncEntitiesTask extends
 	private Entity entity;
 	private boolean isDownloadingZipFile;
 	
+	private HttpURLConnection connection;
 
 	private enum State {
 		DOWNLOADING, SAVING
@@ -164,13 +158,6 @@ public class SyncEntitiesTask extends
 
 	@Override
 	protected HttpTask.EndResult doInBackground(Void... params) {
-		creds = new UsernamePasswordCredentials(username, password);
-
-		HttpParams httpParameters = new BasicHttpParams();
-		HttpConnectionParams.setConnectionTimeout(httpParameters, 60000);
-		HttpConnectionParams.setSoTimeout(httpParameters, 90000);
-		HttpConnectionParams.setSocketBufferSize(httpParameters, 8192);
-		client = new DefaultHttpClient(httpParameters);
 
 		// at this point, we don't care to be smart about which data to
 		// download, we simply download it all
@@ -218,8 +205,7 @@ public class SyncEntitiesTask extends
 	private void deleteAllTables() {
 		// ordering is somewhat important during delete. a few tables have
 		// foreign keys
-		resolver.delete(OpenHDS.IndividualGroups.CONTENT_ID_URI_BASE, null,
-				null);
+		resolver.delete(OpenHDS.IndividualGroups.CONTENT_ID_URI_BASE, null, null);
 		resolver.delete(OpenHDS.Rounds.CONTENT_ID_URI_BASE, null, null);
 		resolver.delete(OpenHDS.Visits.CONTENT_ID_URI_BASE, null, null);
 		resolver.delete(OpenHDS.Relationships.CONTENT_ID_URI_BASE, null, null);
@@ -232,7 +218,7 @@ public class SyncEntitiesTask extends
 	}
 
 
-	 private String getAppStoragePath(){
+	private String getAppStoragePath(){
 	 	File root = Environment.getExternalStorageDirectory();
 	 	String destinationPath = root.getAbsolutePath() + File.separator
 	 			+ "Android" + File.separator + "data" + File.separator
@@ -246,9 +232,9 @@ public class SyncEntitiesTask extends
 	 	}
 	 	
 	 	return destinationPath;
-	 }
+	}
 	 
-	 private InputStream saveFileToStorage(InputStream inputStream) throws Exception {
+	private InputStream saveFileToStorage(InputStream inputStream) throws Exception {
 	  	String path = getAppStoragePath() + "temp.zip";
 	 	FileOutputStream fout = new FileOutputStream(path);
 	 	byte[] buffer = new byte[10*1024];
@@ -265,9 +251,9 @@ public class SyncEntitiesTask extends
 	 	inputStream.close();
 	  	FileInputStream fin = new FileInputStream(path);
 	  	return fin;
-	 }
+	}
 	 
-	 private void processZIPDocument(InputStream inputStream) throws Exception {
+	private void processZIPDocument(InputStream inputStream) throws Exception {
 	  	Log.d("zip", "processing zip file");
 	   	ZipInputStream zin = new ZipInputStream(inputStream);
 	 	ZipEntry entry = zin.getNextEntry();
@@ -278,13 +264,26 @@ public class SyncEntitiesTask extends
 	  	zin.close();
 	 }
 	
-	private void processUrl(String url) throws Exception {
+	private void processUrl(String strUrl) throws Exception {
 		state = State.DOWNLOADING;
 		publishProgress();
 
-		this.isDownloadingZipFile = url.endsWith("zipped");
+		this.isDownloadingZipFile = strUrl.endsWith("zipped");
+		
+		String basicAuth = "Basic " + new String(Base64.encode((this.username+":"+this.password).getBytes(),Base64.NO_WRAP ));
+
+		URL url = new URL(strUrl);
+		connection = (HttpURLConnection) url.openConnection();
+		connection.setRequestMethod("GET");
+		connection.setReadTimeout(10000);
+		connection.setConnectTimeout(15000);
+		connection.setDoInput(true);
+		connection.setRequestProperty("Authorization", basicAuth);
+
+		Log.d("processing", ""+url);
+
+		connection.connect(); 
 		
-		httpGet = new HttpGet(url);
 		processResponse();
 	}
 
@@ -305,25 +304,17 @@ public class SyncEntitiesTask extends
 		}
 	}
 
-	private InputStream getResponse() throws AuthenticationException,
-			ClientProtocolException, IOException, HttpException, Exception {
-		HttpResponse response = null;
-
-		httpGet.addHeader(new BasicScheme().authenticate(creds, httpGet));
-		httpGet.addHeader("content-type", "application/xml");
-		response = client.execute(httpGet);
-		
+	private InputStream getResponse() throws Exception {
+				
 		//Handle 404
-		if(response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND){
+		if(connection.getResponseCode() == HttpStatus.SC_NOT_FOUND){
 			throw new RuntimeException("404 Not found.");
 		}		
-
-		HttpEntity entity = response.getEntity();
 		
 		PushbackInputStream in = null;
 		boolean empty = false;
 		if(entity != null) {
-			in = new PushbackInputStream(entity.getContent());
+			in = new PushbackInputStream(connection.getInputStream());
 		    try {
 		        int firstByte=in.read();
 		        if(firstByte != -1) {
diff --git a/src/main/java/org/openhds/mobile/task/SyncFieldworkersTask.java b/src/main/java/org/openhds/mobile/task/SyncFieldworkersTask.java
index 633616a..9815728 100644
--- a/src/main/java/org/openhds/mobile/task/SyncFieldworkersTask.java
+++ b/src/main/java/org/openhds/mobile/task/SyncFieldworkersTask.java
@@ -3,6 +3,7 @@ package org.openhds.mobile.task;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Calendar;
@@ -11,14 +12,11 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import net.sqlcipher.SQLException;
-
-import org.apache.http.HttpResponse;
 import org.openhds.mobile.OpenHDS;
+import org.openhds.mobile.R;
 import org.openhds.mobile.listener.SyncDatabaseListener;
 import org.openhds.mobile.model.FieldWorker;
 import org.openhds.mobile.model.Settings;
-import org.openhds.mobile.R;
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 import org.xmlpull.v1.XmlPullParserFactory;
@@ -27,6 +25,7 @@ import android.app.ProgressDialog;
 import android.content.ContentResolver;
 import android.content.ContentValues;
 import android.content.Context;
+import net.sqlcipher.SQLException;
 
 public class SyncFieldworkersTask extends HttpTask<Void, Integer> {
 
@@ -47,9 +46,9 @@ public class SyncFieldworkersTask extends HttpTask<Void, Integer> {
 	}
 
 	@Override
-	protected EndResult handleResponseData(HttpResponse response) {
+	protected EndResult handleResponseData(HttpURLConnection response) {
 			try {
-				processXMLDocument(response.getEntity().getContent());
+				processXMLDocument(response.getInputStream());
 			} catch (IllegalStateException e) {
 				return EndResult.FAILURE;
 			} catch (XmlPullParserException e) {
diff --git a/src/main/java/org/openhds/mobile/task/SyncFormsTask.java b/src/main/java/org/openhds/mobile/task/SyncFormsTask.java
index 8245e63..6da1387 100644
--- a/src/main/java/org/openhds/mobile/task/SyncFormsTask.java
+++ b/src/main/java/org/openhds/mobile/task/SyncFormsTask.java
@@ -3,28 +3,21 @@ package org.openhds.mobile.task;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.List;
 
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.apache.http.auth.AuthenticationException;
 import org.apache.http.auth.UsernamePasswordCredentials;
-import org.apache.http.client.ClientProtocolException;
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpGet;
-import org.apache.http.impl.auth.BasicScheme;
-import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.params.BasicHttpParams;
-import org.apache.http.params.HttpConnectionParams;
-import org.apache.http.params.HttpParams;
 import org.openhds.mobile.OpenHDS;
+import org.openhds.mobile.R;
 import org.openhds.mobile.listener.SyncDatabaseListener;
 import org.openhds.mobile.model.Settings;
-import org.openhds.mobile.R;
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
 import org.xmlpull.v1.XmlPullParserFactory;
@@ -34,6 +27,8 @@ import android.content.ContentResolver;
 import android.content.ContentValues;
 import android.content.Context;
 import android.os.AsyncTask;
+import android.util.Base64;
+import android.util.Log;
 
 /**
  * AsyncTask responsible for downloading the OpenHDS "database", that is a
@@ -69,6 +64,8 @@ public class SyncFormsTask extends AsyncTask<Void, Integer, HttpTask.EndResult>
     private Entity entity;
     private Context mContext;
 
+    private HttpURLConnection connection;
+    
     private enum State {
         DOWNLOADING, SAVING
     }
@@ -77,8 +74,7 @@ public class SyncFormsTask extends AsyncTask<Void, Integer, HttpTask.EndResult>
         FORMS
     }
 
-    public SyncFormsTask(String url, String username, String password, ProgressDialog dialog, Context context,
-    		SyncDatabaseListener listener) {
+    public SyncFormsTask(String url, String username, String password, ProgressDialog dialog, Context context, SyncDatabaseListener listener) {
         this.baseurl = url;
         this.username = username;
         this.password = password;
@@ -115,15 +111,8 @@ public class SyncFormsTask extends AsyncTask<Void, Integer, HttpTask.EndResult>
 
     @Override
     protected HttpTask.EndResult doInBackground(Void... params) {
-        creds = new UsernamePasswordCredentials(username, password);
 
-        HttpParams httpParameters = new BasicHttpParams();
-        HttpConnectionParams.setConnectionTimeout(httpParameters, 60000);
-        HttpConnectionParams.setSoTimeout(httpParameters, 90000);
-        HttpConnectionParams.setSocketBufferSize(httpParameters, 8192);
-        client = new DefaultHttpClient(httpParameters);
-
-        // at this point, we don't care to be smart about which data to
+    	// at this point, we don't care to be smart about which data to
         // download, we simply download it all
         deleteAllTables();
 
@@ -146,11 +135,24 @@ public class SyncFormsTask extends AsyncTask<Void, Integer, HttpTask.EndResult>
      
     }
 
-    private void processUrl(String url) throws Exception {
+    private void processUrl(String strUrl) throws Exception {
         state = State.DOWNLOADING;
         publishProgress();
 
-        httpGet = new HttpGet(url);
+        String basicAuth = "Basic " + new String(Base64.encode((this.username+":"+this.password).getBytes(),Base64.NO_WRAP ));
+
+		URL url = new URL(strUrl);
+		connection = (HttpURLConnection) url.openConnection();
+		connection.setRequestMethod("GET");
+		connection.setReadTimeout(10000);
+		connection.setConnectTimeout(15000);
+		connection.setDoInput(true);
+		connection.setRequestProperty("Authorization", basicAuth);
+
+		Log.d("processing", ""+url);
+
+		connection.connect();        
+        
         processResponse();
     }
 
@@ -160,15 +162,10 @@ public class SyncFormsTask extends AsyncTask<Void, Integer, HttpTask.EndResult>
             processXMLDocument(inputStream);
     }
 
-    private InputStream getResponse() throws AuthenticationException, ClientProtocolException, IOException {
-        HttpResponse response = null;
-
-        httpGet.addHeader(new BasicScheme().authenticate(creds, httpGet));
-        httpGet.addHeader("content-type", "application/xml");
-        response = client.execute(httpGet);
-
-        HttpEntity entity = response.getEntity();
-        return entity.getContent();
+    private InputStream getResponse() throws Exception {
+    	int response = connection.getResponseCode();
+		//Log.d("connection", "The response code is: " + response+", type="+connection.getContentType()+", size="+connection.getContentLength());
+		return connection.getInputStream();
     }
 
     private void processXMLDocument(InputStream content) throws Exception {
-- 
2.14.4

